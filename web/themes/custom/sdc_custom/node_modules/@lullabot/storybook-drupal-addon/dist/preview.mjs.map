{"version":3,"sources":["../node_modules/@storybook/global/dist/index.mjs","../src/withDrupalTheme.ts","../src/fetchStoryHtml.ts","../src/preview.ts"],"names":["scope","win","useEffect","useGlobals","globalWindow","heartBeatEmoji","withDrupalTheme","StoryFn","context","globals","updateGlobals","drupalTheme","supportedDrupalThemes","currentHash","hmr","handleMessage","event","data","ex","newHash","createNewBody","htmlDoc","clWrapper","scripts","newBody","attrName","footerScripts","fetchStoryHtml","url","path","params","variant","fetchUrl","init","response","htmlContents","statusText","headersText","value","key","requestedUrl","e","fetchStoryHtml_default","decorators","parameters"],"mappings":"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","sourcesContent":["// src/index.ts\nvar scope = (() => {\n  let win;\n  if (typeof window !== \"undefined\") {\n    win = window;\n  } else if (typeof globalThis !== \"undefined\") {\n    win = globalThis;\n  } else if (typeof global !== \"undefined\") {\n    win = global;\n  } else if (typeof self !== \"undefined\") {\n    win = self;\n  } else {\n    win = {};\n  }\n  return win;\n})();\nexport {\n  scope as global\n};\n","import { global } from '@storybook/global';\nimport type {\n  Renderer,\n  PartialStoryFn as StoryFunction,\n  StoryContext,\n} from \"@storybook/types\";\nimport {\n  useEffect,\n  useGlobals,\n} from '@storybook/preview-api';\n\nconst { window: globalWindow } = global;\nconst heartBeatEmoji = '\\uD83D\\uDC93';\n\nexport const withDrupalTheme = (\n  StoryFn: StoryFunction<Renderer>,\n  context: StoryContext<Renderer>,\n) => {\n  const [globals, updateGlobals] = useGlobals();\n  const drupalTheme = globals?.drupalTheme;\n  const supportedDrupalThemes = globals?.supportedDrupalThemes;\n  useEffect(() => {\n    const {\n      parameters: {drupalTheme, supportedDrupalThemes},\n    } = context;\n    if (supportedDrupalThemes) {\n      if (drupalTheme && !drupalTheme) {\n        updateGlobals({drupalTheme, supportedDrupalThemes});\n      } else {\n        updateGlobals({supportedDrupalThemes});\n      }\n    }\n  }, [drupalTheme, supportedDrupalThemes]);\n\n  const currentHash = globals?.hash;\n  useEffect(() => {\n    const hmr = globalWindow?.__whmEventSourceWrapper?.['/__webpack_hmr'];\n    if (!hmr) {\n      return;\n    }\n    hmr.addMessageListener(handleMessage);\n\n    function handleMessage(event: MessageEvent) {\n      if (event.data == heartBeatEmoji) {\n        return;\n      }\n      let data;\n      try {\n        data = JSON.parse(event.data);\n      } catch (ex) {\n        console.warn('Invalid HMR message: ' + event.data + '\\n' + ex);\n        return;\n      }\n      const newHash = data?.hash;\n      if (!newHash) {\n        return;\n      }\n      currentHash === newHash\n        // If nothing changed in the Webpack hash, it may mean changes in the\n        // server components.\n        ? globalWindow.document.location.reload()\n        // Store the hash in the globals because state will reset every time.\n        : updateGlobals({hash: newHash});\n    }\n  }, [currentHash]);\n\n  return StoryFn();\n};\n","type StorybookContext = {\n  globals: {\n    drupalTheme?: string;\n  };\n  args: Record<string, unknown>,\n  parameters: {\n    options: {\n      variant: string;\n    };\n    fileName: string;\n    drupalTheme?: string;\n    supportedDrupalThemes?: Record<string, { title: string }>;\n  };\n};\n\nfunction createNewBody(htmlDoc: Document): HTMLElement {\n  const clWrapper = htmlDoc.getElementById('___cl-wrapper');\n  // Extract the missing scripts and re-add them.\n  const scripts = htmlDoc.getElementsByTagName('script');\n  const newBody = htmlDoc.createElement('body');\n  // Copy the body attributes from the old body to the new, in case there is\n  // anything functionally relevant.\n  htmlDoc.body.getAttributeNames().forEach((attrName) => {\n    newBody.setAttribute(attrName, htmlDoc.body.getAttribute(attrName));\n  });\n  newBody.innerHTML = clWrapper.innerHTML;\n  // Include the Drupal \"js footer\" assets, i.e., all the <script> tags in\n  // the <body>.\n  const footerScripts = htmlDoc.createElement('div');\n  footerScripts.append(...Array.from(scripts));\n  newBody.append(footerScripts);\n  return newBody;\n}\n\nconst fetchStoryHtml = async (\n  url: string,\n  path: string,\n  params: Record<string, unknown>,\n  context: StorybookContext,\n) => {\n  // Remove trailing slash.\n  url = url.replace(/\\/$/, '');\n\n  const variant = context.parameters?.options?.variant;\n\n  const fetchUrl = new URL(`${url}/_cl_server`);\n  const init: {\n    _storyFileName: string;\n    _drupalTheme: string;\n    _variant?: string;\n  } = {\n    _storyFileName: context.parameters.fileName,\n    _drupalTheme: context.globals.drupalTheme || context.parameters.drupalTheme,\n  };\n  if (variant) {\n    init._variant = variant;\n  }\n  fetchUrl.search = new URLSearchParams(init).toString();\n\n  // Remove any basic auth embedded into the URL and remove it as it will cause\n  // the OPTIONS pre-flight request to fail.\n  fetchUrl.username = '';\n  fetchUrl.password = '';\n\n  const response = await fetch(fetchUrl.toString(), {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(params),\n  });\n  const htmlContents = await response.text();\n  if (response.status >= 399) {\n    const statusText = `${response.status} (${response.statusText})`;\n    let headersText = '';\n    response.headers.forEach((value, key) => {\n      headersText += `${key}: ${value}\\n`;\n    });\n    const requestedUrl = response.url;\n    // There was an error. Storybook should show it.\n    throw new Error(\n      `There was an error while making the request to Drupal. Locate the request in the Network tab of your browser's developer tools for more information.\\nRequested URL: ${requestedUrl}\\nResponse code: ${statusText}\\nResponse Headers:\\n${headersText}\\nResponse body: ${htmlContents}.`,\n    );\n  }\n  try {\n    // The HTML contents Drupal sends back includes regions, blocks, menus, etc.\n    // We need to extract the HTML for the ___cl-wrapper.\n    const parser = new DOMParser();\n    const htmlDoc = parser.parseFromString(htmlContents, 'text/html');\n    // Swap the old body for the new.\n    htmlDoc.body = createNewBody(htmlDoc);\n    return htmlDoc.children[0].outerHTML;\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n};\n\nexport default fetchStoryHtml;\n","/**\n * A decorator is a way to wrap a story in extra “rendering” functionality. Many addons define decorators\n * in order to augment stories:\n * - with extra rendering\n * - gather details about how a story is rendered\n *\n * When writing stories, decorators are typically used to wrap stories with extra markup or context mocking.\n *\n * https://storybook.js.org/docs/react/writing-stories/decorators#gatsby-focus-wrapper\n */\nimport { withDrupalTheme } from './withDrupalTheme';\nimport fetchStoryHtml from './fetchStoryHtml';\n\nexport const decorators = [withDrupalTheme];\nexport const parameters = { server: { fetchStoryHtml } };\n"]}